{"version":3,"sources":["spotify.js","Login.js","DataLayer.js","SidebarOption.js","Sidebar.js","Header.js","SongRow.js","Body.js","Footer.js","Player.js","App.js","reducer.js","serviceWorker.js","index.js"],"names":["loginUrl","join","Login","console","log","window","location","href","className","src","alt","replace","DataLayerContext","createContext","useDataLayerValue","useContext","DataLayer","initialState","reducer","children","Provider","value","useReducer","SidebarOption","title","Icon","playlist","spotify","dispatch","onClick","e","getPlaylist","id","then","response","type","selected_playlist","Sidebar","playlists","HomeIcon","SearchIcon","LibraryIcon","items","map","name","Header","user","placeholder","Avatar","images","url","display_name","SongRow","track","selected_track","album","artists","artist","Body","description","fontSize","tracks","item","Footer","Grid","container","spacing","xs","Slider","Player","discover_weekly","SpotifyWebApi","App","token","useEffect","hash","substring","split","reduce","initial","parts","decodeURIComponent","_token","access_token","setAccessToken","getMe","getUserPlaylists","state","action","Boolean","hostname","match","ReactDOM","render","StrictMode","playing","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5c0327d4.chunk.js","sourcesContent":["// https://developer.spotify.com/\r\n// documentation/web-playback-sdk/quick-start/#\r\n\r\nexport const authEndPoint = \"https://accounts.spotify.com/authorize\";\r\nconst clientId = \"571b8774484a4ea180e709a8ccf45a16\";\r\n\r\nconst scopes = [\r\n    \"user-read-currently-playing\",\r\n    \"user-read-recently-played\",\r\n    \"user-read-playback-state\",\r\n    \"user-top-read\",\r\n    \"user-modify-playback-state\",\r\n];\r\n\r\nexport const getTokenFromUrl = () => {\r\n    return window.location.hash\r\n        .substring(1)\r\n        .split(\"&\")\r\n        .reduce((initial, item) => {\r\n            var parts = item.split(\"=\");\r\n            initial[parts[0]] = decodeURIComponent(parts[1]);\r\n\r\n            return initial;\r\n        }, {});\r\n};\r\n\r\nexport const loginUrl = `${authEndPoint}?client_id=${clientId}&redirect_uri=redirectUrl&scope=${scopes.join(\r\n    \"%20\"\r\n)}&response_type=token&show_dialog=true`;\r\n","import React from \"react\";\r\nimport \"./Login.css\";\r\nimport { loginUrl } from \"./spotify\";\r\n\r\nconst Login = () => {\r\n    console.log(window.location.href);\r\n    return (\r\n        <div className=\"login\">\r\n            <img\r\n                src=\"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\"\r\n                alt=\"\"\r\n            />\r\n            <a href={loginUrl.replace(\"redirectUrl\", window.location.href)}>\r\n                LOGIN WITH SPOTIFY\r\n            </a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nexport const DataLayerContext = createContext();\r\n\r\nexport const DataLayer = ({ initialState, reducer, children }) => (\r\n    <DataLayerContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </DataLayerContext.Provider>\r\n);\r\n\r\nexport const useDataLayerValue = () => useContext(DataLayerContext);\r\n\r\nexport default DataLayer;","import React from \"react\";\r\nimport { useDataLayerValue } from \"./DataLayer\";\r\nimport \"./SidebarOption.css\";\r\n\r\nconst SidebarOption = ({ title, Icon, playlist, spotify }) => {\r\n    const [{}, dispatch] = useDataLayerValue();\r\n\r\n    const selectPlaylistHandler = (e) => {\r\n        if (!playlist) return;\r\n\r\n        spotify.getPlaylist(playlist?.id).then((response) => {\r\n            console.log(\"response:\", response);\r\n            dispatch({\r\n                type: \"SET_SELECTEDPLAYLIST\",\r\n                selected_playlist: response,\r\n            });\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"sidebarOption\"\r\n            onClick={(e) => selectPlaylistHandler(e)}\r\n        >\r\n            {Icon && <Icon className=\"sidebarOption__icon\"></Icon>}\r\n            {Icon ? <h4>{title}</h4> : <p>{title}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SidebarOption;\r\n","import React from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport SidebarOption from \"./SidebarOption\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LibraryIcon from \"@material-ui/icons/LibraryMusic\";\r\nimport { useDataLayerValue } from \"./DataLayer\";\r\n\r\nconst Sidebar = ({ spotify }) => {\r\n    const [{ playlists }] = useDataLayerValue();\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <img\r\n                className=\"sidebar__logo\"\r\n                src=\"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\"\r\n                alt=\"\"\r\n            />\r\n            <SidebarOption title=\"Home\" Icon={HomeIcon} />\r\n            <SidebarOption title=\"Search\" Icon={SearchIcon} />\r\n            <SidebarOption title=\"Your Library\" Icon={LibraryIcon} />\r\n\r\n            <br />\r\n            <strong className=\"sidebar__title\">PLAYLISTS</strong>\r\n            <hr />\r\n\r\n            {playlists?.items?.map((playlist) => (\r\n                <SidebarOption\r\n                    title={playlist.name}\r\n                    playlist={playlist}\r\n                    spotify={spotify}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport { useDataLayerValue } from \"./DataLayer\";\r\n\r\nconst Header = () => {\r\n    const [{ user }] = useDataLayerValue();\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header__left\">\r\n                <SearchIcon />\r\n                <input\r\n                    placeholder=\"Search for Artists, Songs, or Podcasts\"\r\n                    type=\"text\"\r\n                />\r\n            </div>\r\n\r\n            <div className=\"header__right\">\r\n                <Avatar src={user?.images[0]?.url} alt={user?.display_name} />\r\n                <h4>{user?.display_name}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { useDataLayerValue } from \"./DataLayer\";\r\nimport \"./SongRow.css\";\r\n\r\nconst SongRow = ({ track = \"test\" }) => {\r\n    // eslint-disable-next-line no-empty-pattern\r\n    const [{}, dispatch] = useDataLayerValue();\r\n\r\n    const selectTrackHandler = (e) => {\r\n        dispatch({\r\n            type: \"SET_SELECTEDTRACK\",\r\n            selected_track: track,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"songRow\" onClick={(e) => selectTrackHandler(e)}>\r\n            <img\r\n                className=\"songRow__album\"\r\n                src={track.album.images[0].url}\r\n                alt=\"\"\r\n            />\r\n            <div className=\"songRow__info\">\r\n                <h1>{track.name}</h1>\r\n                <p>\r\n                    {track.artists.map((artist) => artist.name).join(\", \")}\r\n                    {track.album.name}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SongRow;\r\n","import React from \"react\";\r\nimport \"./Body.css\";\r\nimport Header from \"./Header\";\r\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport SongRow from \"./SongRow\";\r\n\r\nconst Body = ({ playlist }) => {\r\n    return (\r\n        <div className=\"body\">\r\n            <Header />\r\n\r\n            <div className=\"body__info\">\r\n                <img src={playlist?.images[0].url} alt=\"\" />\r\n                <div className=\"body__infoText\">\r\n                    <strong>PLAYLIST</strong>\r\n                    <h2>{playlist?.name}</h2>\r\n                    <p>{playlist?.description}</p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"body__songs\">\r\n                <div className=\"body__icons\">\r\n                    <PlayCircleFilledIcon className=\"body__shuffle\" />\r\n                    <FavoriteIcon fontSize=\"large\" />\r\n                    <MoreHorizIcon />\r\n                </div>\r\n\r\n                {/* {List of songs} */}\r\n                {playlist?.tracks?.items?.map((item) => (\r\n                    <SongRow track={item.track} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Body;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\nimport PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\";\r\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\";\r\nimport SkipNext from \"@material-ui/icons/SkipNext\";\r\nimport ShuffleIcon from \"@material-ui/icons/Shuffle\";\r\nimport RepeatIcon from \"@material-ui/icons/Repeat\";\r\nimport { Grid, Slider } from \"@material-ui/core\";\r\nimport PlaylistPlayIcon from \"@material-ui/icons/PlaylistPlay\";\r\nimport VolumeDownIcon from \"@material-ui/icons/VolumeDown\";\r\nimport { useDataLayerValue } from \"./DataLayer\";\r\n\r\nconst Footer = () => {\r\n    const [{ selected_track }] = useDataLayerValue();\r\n\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"footer__left\">\r\n                <img\r\n                    className=\"footer__albumLogo\"\r\n                    src={selected_track?.album.images[0].url}\r\n                    alt=\"\"\r\n                />\r\n                <div className=\"footer__songInfo\">\r\n                    <h4>{selected_track ? selected_track?.name : \"track\"}</h4>\r\n                    <p>\r\n                        {selected_track?.artists\r\n                            .map((artist) => artist.name)\r\n                            .join(\", \")}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"footer__center\">\r\n                <ShuffleIcon className=\"footer__green\" />\r\n                <SkipPreviousIcon className=\"footer__icon\" />\r\n                <PlayCircleOutlineIcon\r\n                    fontSize=\"large\"\r\n                    className=\"footer__icon\"\r\n                />\r\n                <SkipNext className=\"footer__icon\" />\r\n                <RepeatIcon className=\"footer__green\" />\r\n            </div>\r\n\r\n            <div className=\"footer__right\">\r\n                <Grid container spacing={2}>\r\n                    <Grid item>\r\n                        <PlaylistPlayIcon />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <VolumeDownIcon />\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Slider />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"./Player.css\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport Body from \"./Body\";\r\nimport Footer from \"./Footer\";\r\nimport { useDataLayerValue } from \"./DataLayer\";\r\n\r\nconst Player = ({ spotify }) => {\r\n    const [{ discover_weekly, selected_playlist }] = useDataLayerValue();\r\n\r\n    return (\r\n        <div className=\"player\">\r\n            <div className=\"player__body\">\r\n                <Sidebar spotify={spotify} />\r\n                <Body\r\n                    playlist={\r\n                        selected_playlist ? selected_playlist : discover_weekly\r\n                    }\r\n                />\r\n            </div>\r\n\r\n            <Footer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Player;\r\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport Login from \"./Login\";\nimport { getTokenFromUrl } from \"./spotify\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport Player from \"./Player\";\nimport { useDataLayerValue } from \"./DataLayer\";\n\nconst spotify = new SpotifyWebApi();\n\nfunction App() {\n    const [{ token }, dispatch] = useDataLayerValue();\n\n    useEffect(() => {\n        const hash = getTokenFromUrl();\n        console.log(hash);\n        window.location.hash = \"\";\n        const _token = hash.access_token;\n        console.log(_token);\n\n        if (_token) {\n            dispatch({\n                type: \"SET_TOKEN\",\n                token: _token,\n            });\n\n            spotify.setAccessToken(_token);\n            spotify.getMe().then((user) => {\n                dispatch({\n                    type: \"SET_USER\",\n                    user: user,\n                });\n            });\n\n            spotify.getUserPlaylists().then((playlists) => {\n                dispatch({\n                    type: \"SET_PLAYLISTS\",\n                    playlists: playlists,\n                });\n            });\n\n            spotify.getPlaylist(\"37i9dQZF1E36tW5bkWLjXH\").then((response) => {\n                console.log(\"response:\" + response);\n                dispatch({\n                    type: \"SET_DISCOVER_WEEKLY\",\n                    discover_weekly: response,\n                });\n            });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className=\"App\">\n            {token ? <Player spotify={spotify} /> : <Login />}\n        </div>\n    );\n}\n\nexport default App;\n","export const initialState = {\r\n    user: null,\r\n    playlists: [],\r\n    playing: false,\r\n    item: null,\r\n    selected_track: null,\r\n    selected_playlist: null,\r\n    // Remove after developing...\r\n    // token: \"BQASN1eY2BfVnYfqVFmvQsUv99xZ16QIaHYU9bXDjXO0fFFOGhTcRzyOGiW1DDRhtB_P_WiKQKDx2mSqvTB8nfGcoZHqXpjPBBgvk8dN-_SrKD8ZTMIIhYGroyBFLJTynM-GseoBiXedDdXQhRmC-P4UqnV0d74DfSeeXv1vX5KblK9b07eR\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    console.log(action);\r\n\r\n    // Action -> type, [payload]\r\n\r\n    switch (action.type) {\r\n        case \"SET_USER\":\r\n            return {\r\n                ...state,\r\n                user: action.user,\r\n            };\r\n\r\n        case \"SET_TOKEN\":\r\n            return {\r\n                ...state,\r\n                token: action.token,\r\n            };\r\n\r\n        case \"SET_PLAYLISTS\":\r\n            return {\r\n                ...state,\r\n                playlists: action.playlists,\r\n            };\r\n\r\n        case \"SET_DISCOVER_WEEKLY\":\r\n            return {\r\n                ...state,\r\n                discover_weekly: action.discover_weekly,\r\n            };\r\n\r\n        case \"SET_SELECTEDTRACK\":\r\n            return {\r\n                ...state,\r\n                selected_track: action.selected_track,\r\n            };\r\n\r\n        case \"SET_SELECTEDPLAYLIST\":\r\n            return {\r\n                ...state,\r\n                selected_playlist: action.selected_playlist,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport DataLayer from \"./DataLayer\";\nimport reducer, { initialState } from \"./reducer\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <DataLayer initialState={initialState} reducer={reducer}>\n            <App />\n        </DataLayer>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}